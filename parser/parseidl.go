//line parseidl.y:6

// IDL Parser
// Generated by:
// go tool yacc -o parseidl.go parseidl.y
//
// THIS FILE IS AUTO-GENERATED - DO NOT MODIFY

package parser

import __yyfmt__ "fmt"

//line parseidl.y:14
import (
	"fmt"
	"github.com/babelrpc/babel/idl"
	"io"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"text/scanner"
	"unicode/utf8"
)

// globalData holds information used for parsing that is held in the lexer.
type globalData struct {
	pidl           *idl.Idl
	currentConst   *idl.Const
	currentEnum    *idl.Enum
	currentStruct  *idl.Struct
	currentService *idl.Service
	currentMethod  *idl.Method
	basedir        string
}

//line parseidl.y:41
type yySymType struct {
	yys         int
	Ident       string
	String      string
	Char        rune
	Int         int64
	Float       float64
	Bool        bool
	Comment     string
	DataType    *idl.Type
	Comments    []string
	Attr        *idl.Attribute
	Attrs       []*idl.Attribute
	AttrVal     *idl.Pair
	AttrVals    []*idl.Pair
	Initializer *idl.Pair
	As          string
}

const IDENT = 57346
const STRING = 57347
const CHAR = 57348
const INT = 57349
const FLOAT = 57350
const BOOL = 57351
const COMMENT = 57352
const BINARY = 57353
const IMPORT = 57354
const NAMESPACE = 57355
const LANG = 57356
const CONST = 57357
const ENUM = 57358
const STRUCT = 57359
const EXTENDS = 57360
const SERVICE = 57361
const ABSTRACT = 57362
const BASETYPE = 57363
const LIST = 57364
const MAP = 57365
const AS = 57366
const VOID = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"STRING",
	"CHAR",
	"INT",
	"FLOAT",
	"BOOL",
	"COMMENT",
	"BINARY",
	"IMPORT",
	"NAMESPACE",
	"LANG",
	"CONST",
	"ENUM",
	"STRUCT",
	"EXTENDS",
	"SERVICE",
	"ABSTRACT",
	"BASETYPE",
	"LIST",
	"MAP",
	"AS",
	"VOID",
	"'/'",
	"'{'",
	"'}'",
	"'='",
	"'-'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"','",
	"'.'",
	"'['",
	"']'",
	"'@'",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line parseidl.y:638

// IdlLex is a lexer usable by yacc that uses Go's built-in lexer
// to provide lexical analysis for IDL files.
type IdlLex struct {
	s        scanner.Scanner
	Filename string
	Errors   []string
	globals  globalData
}

// Lex returns the next token in the steam and classifies it.
func (lex *IdlLex) Lex(yylval *yySymType) int {
	var err error

again:

	tok := lex.s.Scan()
	if tok == scanner.EOF {
		return 0
	}
	// fmt.Printf("lex: %s %s\n", scanner.TokenString(tok), lex.s.TokenText())
	switch scanner.TokenString(tok) {
	case "Ident":
		yylval.Ident = lex.s.TokenText()
		switch yylval.Ident {
		case "import":
			return IMPORT
		case "namespace":
			return NAMESPACE
		case "csharp", "java", "python", "ruby", "go", "js", "asp", "php", "ios":
			return LANG
		case "const":
			return CONST
		case "enum":
			return ENUM
		case "abstract":
			return ABSTRACT
		case "struct":
			return STRUCT
		case "extends":
			return EXTENDS
		case "void":
			return VOID
		case "service":
			return SERVICE
		case "bool", "byte", "int8", "int16", "int32", "int64", "float32", "float64", "string", "datetime", "decimal", "char":
			return BASETYPE
		case "binary":
			return BINARY
		case "list":
			return LIST
		case "map":
			return MAP
		case "as":
			return AS
		case "true", "false":
			yylval.Bool, err = strconv.ParseBool(lex.s.TokenText())
			if err != nil {
				lex.Error(fmt.Sprintf("Unable to parse bool %s: %s", lex.s.TokenText(), err))
				return 0
			}
			return BOOL
		}
		return IDENT
	case "String":
		//yylval.String = strings.Trim(lex.s.TokenText(), "\"")
		yylval.String, err = strconv.Unquote(lex.s.TokenText())
		if err != nil {
			lex.Error(err.Error())
		}
		return STRING
	case "Char":
		s, err := strconv.Unquote(lex.s.TokenText())
		if err != nil {
			lex.Error(err.Error())
		}
		if utf8.RuneCountInString(s) == 1 {
			yylval.Char, _ = utf8.DecodeRuneInString(s)
			return CHAR
		} else {
			lex.Error(fmt.Sprintf("Character value shouldn't contain multiple characters: %s", lex.s.TokenText()))
		}
	case "Int":
		yylval.Int, err = strconv.ParseInt(lex.s.TokenText(), 10, 64)
		if err != nil {
			lex.Error(fmt.Sprintf("Unable to parse integer %s: %s", lex.s.TokenText(), err))
			return 0
		}
		return INT
	case "Float":
		yylval.Float, err = strconv.ParseFloat(lex.s.TokenText(), 64)
		if err != nil {
			lex.Error(fmt.Sprintf("Unable to parse integer %s: %s", lex.s.TokenText(), err))
			return 0
		}
		return FLOAT
	case "Comment":
		str := lex.s.TokenText()
		yylval.Comment = strings.Replace(strings.Trim(str, "/*"), "\r", "", -1)
		// only deal with doc comments
		if strings.HasPrefix(str, "///") || strings.HasPrefix(str, "/**") {
			return COMMENT
		} else {
			goto again
		}
	}

	return int(tok)
}

// Error is called when a parsing error occcurs. Errors are collected in an array.
func (lex *IdlLex) Error(s string) {
	p := lex.s.Pos()
	lex.Errors = append(lex.Errors, fmt.Sprintf("Line %d, col %d of %s: %s", p.Line, p.Column, lex.Filename, s))
}

// Init prepares the lexer for use.
func (lex *IdlLex) Init(src io.Reader, fname string) {
	lex.s.Init(src)
	lex.s.Mode = scanner.ScanChars | scanner.ScanInts | scanner.ScanFloats | scanner.ScanStrings | scanner.ScanIdents | scanner.ScanComments
	lex.Filename = fname
	lex.Errors = make([]string, 0)
}

// check tests for errors logs them to lex's Error function. Fatal
// errors result in a panic.
func check(err error, fatal bool, lex yyLexer) bool {
	if err != nil {
		m := map[bool]string{false: "Error", true: "Fatal"}
		lex.Error(m[fatal] + ": " + err.Error())
		if fatal {
			panic(fmt.Errorf("%s", strings.Join(lex.(*IdlLex).Errors, "\n")))
		}
		return false
	} else {
		return true
	}
}

// ParseIdl parses the idl in the given file with tests for the given
// language. The Idl object is returned unless an error occured.
func ParseIdl(fileName, lang string) (*idl.Idl, error) {
	f, err := os.Open(fileName)
	if err != nil {
		return nil, fmt.Errorf("Error opening input file: %s", err)
	}
	defer f.Close()

	var lexer IdlLex
	lexer.Init(f, f.Name())
	lexer.globals.pidl = new(idl.Idl)
	lexer.globals.pidl.Init()
	lexer.globals.pidl.Filename = filepath.ToSlash(fileName)
	lexer.globals.basedir = filepath.ToSlash(filepath.Dir(fileName))

	yyParse(&lexer)
	if len(lexer.Errors) > 0 {
		return nil, fmt.Errorf("%s\n%d parsing errors, exiting", strings.Join(lexer.Errors, "\n"), len(lexer.Errors))
	}

	err = lexer.globals.pidl.Validate(lang)
	if err != nil {
		return nil, fmt.Errorf("IDL does not validate: %s", err)
	}

	return lexer.globals.pidl, nil
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	1, 1,
	-2, 100,
}

const yyNprod = 103
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 226

var yyAct = [...]int{

	64, 132, 169, 172, 57, 19, 107, 2, 49, 82,
	134, 31, 12, 11, 12, 58, 134, 135, 189, 38,
	40, 23, 66, 135, 186, 20, 199, 133, 136, 137,
	21, 131, 33, 133, 136, 137, 184, 41, 43, 42,
	154, 34, 153, 41, 164, 42, 78, 102, 55, 41,
	20, 42, 65, 66, 18, 21, 66, 18, 95, 91,
	93, 88, 90, 92, 17, 190, 170, 67, 118, 150,
	103, 80, 79, 105, 18, 182, 179, 181, 176, 178,
	180, 83, 94, 85, 89, 73, 86, 109, 81, 110,
	61, 113, 114, 115, 116, 117, 70, 108, 173, 62,
	54, 177, 119, 126, 122, 123, 124, 125, 166, 71,
	46, 45, 138, 139, 128, 47, 5, 25, 16, 129,
	68, 29, 30, 146, 9, 8, 147, 148, 149, 5,
	127, 151, 185, 12, 143, 145, 140, 142, 144, 187,
	188, 155, 32, 158, 159, 160, 161, 162, 99, 101,
	96, 98, 100, 156, 157, 165, 13, 167, 168, 141,
	134, 120, 121, 200, 111, 112, 194, 135, 163, 152,
	174, 74, 53, 97, 50, 175, 48, 133, 136, 137,
	44, 36, 35, 28, 27, 12, 191, 183, 193, 171,
	192, 84, 106, 72, 69, 76, 195, 197, 198, 63,
	75, 104, 202, 201, 196, 60, 52, 59, 51, 22,
	15, 7, 14, 10, 6, 3, 1, 26, 37, 130,
	77, 87, 39, 56, 4, 24,
}
var yyPact = [...]int{

	-1000, -1000, 119, 112, -1000, -1000, -1000, -1000, 181, 151,
	105, 38, -1000, -10, -1000, -1000, 103, 180, 179, -1000,
	-1000, -1000, -1000, 106, 137, -1000, 15, -1000, -1000, 178,
	177, 0, -10, -1000, 176, 84, 83, 98, 172, -1000,
	-1000, -1000, 170, -1000, -1000, -1000, -1000, 168, 73, 10,
	-22, -1000, -1000, 72, -1000, -1000, -1000, 21, -1000, 92,
	81, 167, -1000, -1000, -1000, -1000, -1000, 8, -1000, -1000,
	43, -1000, -1000, 42, 61, -1000, 53, 54, -1000, 143,
	40, -1000, 45, -1000, -1000, 119, -13, -1000, -13, 157,
	-13, -13, -13, -13, 18, 39, -10, 154, -10, -10,
	-10, -10, -13, 123, -1000, -1000, -1000, 119, 6, -1000,
	-1000, -13, -13, -1000, -1000, -1000, -1000, -1000, 129, -1000,
	-10, -10, -1000, -1000, -1000, -1000, -1000, -13, 41, 12,
	165, -1000, -1000, -1000, -1000, -1000, 9, 7, -1000, -1000,
	-13, 146, -13, -13, -13, -13, 18, -1000, -1000, -1000,
	-1000, 164, 13, 156, 87, -1000, -13, -13, -1000, -1000,
	-1000, -1000, -1000, 37, -1000, 74, 74, -1000, -1000, -10,
	71, -1000, 2, 127, -11, -1000, -1000, 132, -1000, -1000,
	-1000, -1000, -18, 33, -1000, -1000, 156, -1000, -1000, 162,
	-10, -1000, 119, 74, -1000, -1000, 12, -8, 159, -1000,
	37, -13, -1000,
}
var yyPgo = [...]int{

	0, 225, 1, 6, 224, 223, 8, 222, 11, 221,
	220, 2, 3, 219, 218, 4, 217, 216, 215, 214,
	213, 212, 211, 5, 210, 209, 208, 207, 206, 205,
	201, 9, 200, 199, 195, 194, 193, 0, 192, 191,
	189, 187, 186,
}
var yyR1 = [...]int{

	0, 17, 18, 18, 22, 20, 20, 24, 19, 16,
	16, 1, 21, 21, 26, 25, 28, 25, 30, 25,
	32, 25, 33, 25, 14, 14, 27, 27, 35, 35,
	35, 35, 35, 35, 35, 29, 29, 36, 36, 31,
	31, 38, 34, 34, 40, 39, 13, 13, 41, 41,
	42, 2, 2, 2, 2, 2, 12, 12, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 8, 8, 7,
	7, 6, 6, 5, 5, 15, 15, 10, 10, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 37, 37, 23, 23, 23,
	3, 3, 4,
}
var yyR2 = [...]int{

	0, 5, 0, 2, 3, 0, 2, 4, 5, 1,
	3, 1, 0, 2, 0, 7, 0, 7, 0, 11,
	0, 9, 0, 8, 0, 1, 0, 2, 4, 5,
	4, 5, 4, 4, 4, 0, 2, 4, 5, 0,
	2, 6, 0, 2, 0, 9, 1, 1, 0, 2,
	6, 1, 1, 1, 5, 8, 0, 2, 0, 2,
	3, 2, 3, 2, 2, 2, 4, 0, 2, 3,
	5, 0, 2, 2, 5, 1, 3, 0, 2, 2,
	3, 2, 3, 2, 2, 2, 2, 4, 5, 4,
	5, 4, 4, 4, 4, 0, 1, 0, 1, 1,
	0, 2, 1,
}
var yyChk = [...]int{

	-1000, -17, -3, -18, -4, 10, -19, -22, 13, 12,
	-20, -15, 4, 5, -21, -24, 13, 26, 36, -23,
	35, 40, -25, -3, -1, 14, -16, 4, 4, 15,
	16, -8, 5, -23, 26, 4, 4, -14, 19, -7,
	20, 37, 39, -23, 4, 27, 27, 17, 4, -6,
	4, -26, -28, 4, 27, 38, -5, -15, 37, -27,
	-29, 18, 27, -33, -37, 31, 35, -6, 28, -35,
	4, 28, -36, 4, 4, -32, -34, -10, 38, 29,
	29, 27, -31, 28, -39, -3, 32, -9, 7, 30,
	8, 5, 9, 6, -15, 4, 7, 30, 8, 5,
	9, 6, 7, 30, -30, 28, -38, -3, -8, -37,
	-37, 7, 8, -37, -37, -37, -37, -37, 29, -23,
	7, 8, -23, -23, -23, -23, -37, 7, -31, -8,
	-13, 25, -2, 21, 4, 11, 22, 23, -37, -37,
	7, 30, 8, 5, 9, 6, -15, -23, -23, -37,
	28, -2, 4, 33, 33, -37, 7, 8, -37, -37,
	-37, -37, -37, 4, 31, -2, 21, -37, -37, -11,
	29, -40, -12, 24, -12, -23, 7, 30, 8, 5,
	9, 6, 4, -41, 34, 5, 35, 7, 8, 36,
	32, -42, -3, -2, 4, -23, -8, -12, -2, 34,
	4, -11, -37,
}
var yyDef = [...]int{

	100, -2, 2, 0, 101, 102, 5, 3, 0, 0,
	12, 0, 75, 97, -2, 6, 0, 0, 0, 4,
	98, 99, 13, 67, 0, 11, 97, 9, 76, 0,
	0, 24, 97, 8, 0, 0, 0, 0, 0, 68,
	25, 71, 0, 7, 10, 14, 16, 0, 0, 0,
	0, 26, 35, 0, 22, 69, 72, 95, 71, 0,
	0, 0, 20, 42, 73, 77, 96, 0, 15, 27,
	0, 17, 36, 0, 0, 39, 100, 0, 70, 0,
	0, 18, 100, 23, 43, 67, 95, 78, 95, 0,
	95, 95, 95, 95, 95, 75, 97, 0, 97, 97,
	97, 97, 95, 0, 39, 21, 40, 67, 0, 74,
	79, 95, 95, 81, 83, 84, 85, 86, 0, 28,
	97, 97, 30, 32, 33, 34, 37, 95, 100, 0,
	0, 46, 47, 51, 52, 53, 0, 0, 80, 82,
	95, 0, 95, 95, 95, 95, 95, 29, 31, 38,
	19, 0, 0, 0, 0, 87, 95, 95, 89, 91,
	92, 93, 94, 58, 44, 56, 56, 88, 90, 97,
	0, 48, 0, 0, 0, 41, 59, 0, 61, 63,
	64, 65, 0, 100, 54, 57, 0, 60, 62, 0,
	97, 49, 67, 56, 66, 45, 0, 0, 0, 55,
	58, 95, 50,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	31, 32, 3, 3, 35, 30, 36, 26, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 40,
	33, 29, 34, 3, 39, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 37, 3, 38, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 28,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:107
		{
			yylex.(*IdlLex).globals.pidl.Comments = yyDollar[1].Comments
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:116
		{
			//fmt.Printf("import \"%s\"\n", $2)
			fpath := path.Join(yylex.(*IdlLex).globals.basedir, yyDollar[2].String)
			fname := filepath.FromSlash(fpath)

			f, err := os.Open(fname)
			check(err, true, yylex)
			defer f.Close()

			var lexer IdlLex
			lexer.Init(f, f.Name())

			lexer.globals.pidl, err = yylex.(*IdlLex).globals.pidl.AddImport(fpath)
			check(err, true, yylex)
			lexer.globals.basedir = filepath.ToSlash(filepath.Dir(fname))

			yyParse(&lexer)
			yylex.(*IdlLex).Errors = append(yylex.(*IdlLex).Errors, lexer.Errors...)
		}
	case 7:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:141
		{
			// fmt.Printf("namespace %s \"%s\"\n", $2, $3)
			check(yylex.(*IdlLex).globals.pidl.AddNamespace(yyDollar[2].Ident, yyDollar[3].String), false, yylex)
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:149
		{
			// fmt.Printf("namespace %s \"%s\"\n", $2, $3)
			check(yylex.(*IdlLex).globals.pidl.AddDefaultNamespace(yyDollar[2].Ident, yyDollar[4].Ident), false, yylex)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:157
		{
			yyVAL.Ident = yyDollar[1].Ident
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:161
		{
			yyVAL.Ident = yyDollar[1].Ident + "/" + yyDollar[3].Ident
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:172
		{
			//fmt.Printf("const %s {\n", $2)
			var err error
			yylex.(*IdlLex).globals.currentConst, err = yylex.(*IdlLex).globals.pidl.AddConst(yyDollar[3].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentConst.Comments = yyDollar[1].Comments
		}
	case 15:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parseidl.y:180
		{
			//fmt.Printf("}\n")
			yylex.(*IdlLex).globals.currentConst = nil
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:185
		{
			//fmt.Printf("enum %s {\n", $2)
			var err error
			yylex.(*IdlLex).globals.currentEnum, err = yylex.(*IdlLex).globals.pidl.AddEnum(yyDollar[3].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentEnum.Comments = yyDollar[1].Comments
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parseidl.y:193
		{
			//fmt.Printf("}\n")
			yylex.(*IdlLex).globals.currentEnum = nil
		}
	case 18:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parseidl.y:198
		{
			//fmt.Printf("struct %s extends %s {\n", $5, $7)
			var err error
			yylex.(*IdlLex).globals.currentStruct, err = yylex.(*IdlLex).globals.pidl.AddStruct(yyDollar[5].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentStruct.Extends = yyDollar[7].Ident
			yylex.(*IdlLex).globals.currentStruct.Comments = yyDollar[1].Comments
			yylex.(*IdlLex).globals.currentStruct.Attributes = yyDollar[2].Attrs
			yylex.(*IdlLex).globals.currentStruct.Abstract = yyDollar[3].Bool
		}
	case 19:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parseidl.y:209
		{
			//fmt.Printf("}\n")
			yylex.(*IdlLex).globals.currentStruct = nil
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parseidl.y:214
		{
			//fmt.Printf("struct %s {\n", $5)
			var err error
			yylex.(*IdlLex).globals.currentStruct, err = yylex.(*IdlLex).globals.pidl.AddStruct(yyDollar[5].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentStruct.Comments = yyDollar[1].Comments
			yylex.(*IdlLex).globals.currentStruct.Attributes = yyDollar[2].Attrs
			yylex.(*IdlLex).globals.currentStruct.Abstract = yyDollar[3].Bool
		}
	case 21:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parseidl.y:224
		{
			//fmt.Printf("}\n")
			yylex.(*IdlLex).globals.currentStruct = nil
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:229
		{
			//fmt.Printf("struct %s {\n", $4)
			var err error
			yylex.(*IdlLex).globals.currentService, err = yylex.(*IdlLex).globals.pidl.AddService(yyDollar[4].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentService.Comments = yyDollar[1].Comments
			yylex.(*IdlLex).globals.currentService.Attributes = yyDollar[2].Attrs
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parseidl.y:238
		{
			//fmt.Printf("}\n")
			yylex.(*IdlLex).globals.currentService = nil
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:245
		{
			yyVAL.Bool = false
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:249
		{
			yyVAL.Bool = true
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:258
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, yyDollar[3].Int, "int"), false, yylex)
			// fmt.Printf("\t%s = %d\n", $1, $3)
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:263
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, -yyDollar[4].Int, "int"), false, yylex)
			// fmt.Printf("\t%s = %d\n", $1, $3)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:268
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, yyDollar[3].Float, "float"), false, yylex)
			//fmt.Printf("\t%s = %f\n", $1, $3)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:273
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, -yyDollar[4].Float, "float"), false, yylex)
			//fmt.Printf("\t%s = %f\n", $1, $3)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:278
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, yyDollar[3].String, "string"), false, yylex)
			//fmt.Printf("\t%s = \"%s\"\n", $1, $3)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:283
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, yyDollar[3].Bool, "bool"), false, yylex)
			//fmt.Printf("\t%s = \"%s\"\n", $1, $3)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:288
		{
			check(yylex.(*IdlLex).globals.currentConst.Add(yyDollar[1].Ident, yyDollar[3].Char, "char"), false, yylex)
			//fmt.Printf("\t%s = \'%c\'\n", $1, $3)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:298
		{
			//fmt.Printf("\t%s = %d\n", $1, $3)
			check(yylex.(*IdlLex).globals.currentEnum.Add(yyDollar[1].Ident, yyDollar[3].Int), false, yylex)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:303
		{
			//fmt.Printf("\t%s = %d\n", $1, $3)
			check(yylex.(*IdlLex).globals.currentEnum.Add(yyDollar[1].Ident, -yyDollar[4].Int), false, yylex)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parseidl.y:313
		{
			//fmt.Printf("\t%s %s\n", $3, $4)
			yyDollar[3].DataType.Rename = yyDollar[4].Ident
			f, err := yylex.(*IdlLex).globals.currentStruct.AddField(yyDollar[3].DataType, yyDollar[4].Ident)
			if check(err, false, yylex) {
				f.Comments = yyDollar[1].Comments
				f.Attributes = yyDollar[2].Attrs
				if yyDollar[5].Initializer != nil {
					check(f.SetInitializer(yyDollar[5].Initializer.Value, yyDollar[5].Initializer.DataType), false, yylex)
				}
			}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:331
		{
			//fmt.Printf("\t%s %s\n", $3, $4)
			var err error
			yylex.(*IdlLex).globals.currentMethod, err = yylex.(*IdlLex).globals.currentService.AddMethod(yyDollar[3].DataType, yyDollar[4].Ident)
			check(err, true, yylex)
			yylex.(*IdlLex).globals.currentMethod.Comments = yyDollar[1].Comments
			yylex.(*IdlLex).globals.currentMethod.Attributes = yyDollar[2].Attrs
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parseidl.y:340
		{
			yylex.(*IdlLex).globals.currentMethod = nil
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:347
		{
			yyVAL.DataType = &idl.Type{Name: "void"}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:351
		{
			yyVAL.DataType = yyDollar[1].DataType
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parseidl.y:360
		{
			//fmt.Printf("\t%s %s\n", $3, $4)
			yyDollar[3].DataType.Rename = yyDollar[4].Ident
			p, err := yylex.(*IdlLex).globals.currentMethod.AddParameter(yyDollar[3].DataType, yyDollar[4].Ident)
			if check(err, false, yylex) {
				p.Comments = yyDollar[1].Comments
				p.Attributes = yyDollar[2].Attrs
				if yyDollar[5].Initializer != nil {
					check(p.SetInitializer(yyDollar[5].Initializer.Value, yyDollar[5].Initializer.DataType), false, yylex)
				}
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:376
		{
			yyVAL.DataType = &idl.Type{Name: yyDollar[1].Ident}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:380
		{
			yyVAL.DataType = &idl.Type{Name: yyDollar[1].Ident}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:384
		{
			yyVAL.DataType = &idl.Type{Name: yyDollar[1].Ident}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:388
		{
			yyDollar[3].DataType.Rename = yyDollar[4].As
			yyVAL.DataType = &idl.Type{Name: "list", ValueType: yyDollar[3].DataType}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parseidl.y:393
		{
			yyDollar[6].DataType.Rename = yyDollar[7].As
			yyVAL.DataType = &idl.Type{Name: "map", KeyType: &idl.Type{Name: yyDollar[3].Ident, Rename: yyDollar[4].As}, ValueType: yyDollar[6].DataType}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:400
		{
			yyVAL.As = ""
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:404
		{
			yyVAL.As = yyDollar[2].String
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:410
		{
			yyVAL.Initializer = nil
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:414
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].Int, DataType: "int"}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:418
		{
			yyVAL.Initializer = &idl.Pair{Value: -yyDollar[3].Int, DataType: "int"}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:422
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].Float, DataType: "float"}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:426
		{
			yyVAL.Initializer = &idl.Pair{Value: -yyDollar[3].Float, DataType: "float"}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:430
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].String, DataType: "string"}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:434
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].Bool, DataType: "bool"}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:438
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].Char, DataType: "char"}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:442
		{
			yyVAL.Initializer = &idl.Pair{Value: yyDollar[2].Ident + "." + yyDollar[4].Ident, DataType: "#ref"}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:448
		{
			yyVAL.Attrs = make([]*idl.Attribute, 0)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:452
		{
			for i, _ := range yyDollar[2].Attrs {
				for j := i + 1; j < len(yyDollar[2].Attrs); j++ {
					if strings.ToLower(yyDollar[2].Attrs[i].Name) == strings.ToLower(yyDollar[2].Attrs[j].Name) && yyDollar[2].Attrs[i].Scope == "" && yyDollar[2].Attrs[j].Scope == "" {
						yylex.Error(fmt.Sprintf("Attribute used twice: %s", yyDollar[2].Attrs[j].Name))
					}
				}
			}
			for _, a1 := range yyDollar[1].Attrs {
				for _, a2 := range yyDollar[2].Attrs {
					if strings.ToLower(a1.Name) == strings.ToLower(a2.Name) && a1.Scope == "" && a2.Scope == "" {
						yylex.Error(fmt.Sprintf("Attribute used twice: %s", a2.Name))
					}
				}
			}
			yyVAL.Attrs = append(yyDollar[1].Attrs, yyDollar[2].Attrs...)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:473
		{
			// fmt.Printf("]\n")
			yyVAL.Attrs = yyDollar[2].Attrs
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:478
		{
			// fmt.Printf("]\n")
			for _, a := range yyDollar[4].Attrs {
				a.Scope = yyDollar[2].Ident
			}
			yyVAL.Attrs = yyDollar[4].Attrs
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:488
		{
			yyVAL.Attrs = make([]*idl.Attribute, 0)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:492
		{
			//for _, a := range($1) {
			//	if strings.ToLower(a.Name) == strings.ToLower($2.Name) && a.Scope == "" && $2.Scope == "" {
			//		yylex.Error(fmt.Sprintf("Attribute used twice: %s", $2.Name))
			//	}
			//}
			yyVAL.Attrs = append(yyDollar[1].Attrs, yyDollar[2].Attr)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:504
		{
			//fmt.Printf("%s ", $1)
			yyVAL.Attr = &idl.Attribute{Name: yyDollar[1].Ident, Parameters: make([]*idl.Pair, 0)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:509
		{
			//fmt.Printf(") ")
			yyVAL.Attr = &idl.Attribute{Name: yyDollar[1].Ident, Parameters: yyDollar[3].AttrVals}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:517
		{
			yyVAL.Ident = yyDollar[1].Ident
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:521
		{
			yyVAL.Ident = yyDollar[1].Ident + "." + yyDollar[3].Ident
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:527
		{
			yyVAL.AttrVals = make([]*idl.Pair, 0)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:531
		{
			yyVAL.AttrVals = append(yyDollar[1].AttrVals, yyDollar[2].AttrVal)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:538
		{
			//fmt.Printf("%d ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].Int, DataType: "int"}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:543
		{
			//fmt.Printf("%d ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: -yyDollar[2].Int, DataType: "int"}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:548
		{
			//fmt.Printf("%f ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].Float, DataType: "float"}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parseidl.y:553
		{
			//fmt.Printf("%f ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: -yyDollar[2].Float, DataType: "float"}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:558
		{
			//fmt.Printf("\"%s\" ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].String, DataType: "string"}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:563
		{
			//fmt.Printf("\"%d\" ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].Bool, DataType: "bool"}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:568
		{
			//fmt.Printf("\"%d\" ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].Char, DataType: "char"}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:573
		{
			//fmt.Printf("\"%d\" ", $1)
			yyVAL.AttrVal = &idl.Pair{Value: yyDollar[1].Ident, DataType: "#ref"}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:578
		{
			//fmt.Printf("%s = %d ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].Int, DataType: "int"}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:583
		{
			//fmt.Printf("%s = %d ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: -yyDollar[4].Int, DataType: "int"}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:588
		{
			//fmt.Printf("%s = %f ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].Float, DataType: "float"}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parseidl.y:593
		{
			//fmt.Printf("%s = %f ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: -yyDollar[4].Float, DataType: "float"}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:598
		{
			//fmt.Printf("%s = \"%s\" ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].String, DataType: "string"}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:603
		{
			//fmt.Printf("%s = \"%d\" ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].Bool, DataType: "bool"}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:608
		{
			//fmt.Printf("%s = \"%d\" ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].Char, DataType: "char"}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parseidl.y:613
		{
			//fmt.Printf("%s = \"%d\" ", $1, $3)
			yyVAL.AttrVal = &idl.Pair{Name: yyDollar[1].Ident, Value: yyDollar[3].Ident, DataType: "#ref"}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parseidl.y:623
		{
			yyVAL.Comments = make([]string, 0)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parseidl.y:627
		{
			yyVAL.Comments = append(yyDollar[1].Comments, yyDollar[2].Comment)
			// fmt.Printf("*** %s\n", $2)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parseidl.y:634
		{
			//fmt.Printf(" %s\n", $1)
		}
	}
	goto yystack /* stack new state and value */
}
