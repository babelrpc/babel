// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from {{.Filename}}
{{template "SIMPLECOMMENTS" .Comments }}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Concur.Babel;
{{range usings}}using {{.}};
{{end}}
namespace {{index .Namespaces "csharp"}}
{
{{range .Services}}
{{setindent "\t"}}{{template "COMMENTS" .Comments }}	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public class {{.Name}}Client : BabelClientBase, I{{.Name}}, I{{.Name}}Async
	{
		/// <summary>
		/// Client class constructor
		/// </summary>
		/// <param name="baseUrl">Base service URL</param>
		/// <param name="timeoutSeconds">Timeout in seconds</param>
		public {{.Name}}Client(string baseUrl, int timeoutSeconds = 120) : base(new HttpTransport(new BabelJsonSerializer(), HttpTransport.ConcatUrl(baseUrl, "{{.Name}}"), timeoutSeconds, "application/json", "application/json")) { }

		/// <summary>
		/// Client class constructor that can be used for unit testing
		/// </summary>
		/// <param name="transport">[Mock] transport object</param>
		public {{.Name}}Client(IBabelTransport transport)  : base(transport) { } 

#region Synchronous methods
{{range $i, $m := .Methods}}
{{setindent "\t\t"}}{{template "METHODCOMMENTS" .}}		public {{formatType .Returns}} {{toPascalCase .Name}} ({{range $i, $v := .Parameters}}{{formatType .Type}} {{.Name}}{{if .Initializer}} = null{{end}}{{if last $i $m.Parameters | not}}, {{else}}{{end}}{{end}})
		{
			{{if isVoid .Returns}}Send{{else}}return MakeRequestAndDeserialize<{{formatType .Returns}}>{{end}}("{{.Name}}", new Dictionary<string, object>() { {{range $i, $v := .Parameters}}{"{{.Name}}", {{.Name}} }{{if last $i $m.Parameters | not}}, {{end}}{{end}} });
		}
{{end}}
#endregion
#region Asynchronous methods
{{range $i, $m := .Methods}}
{{setindent "\t\t"}}{{template "METHODCOMMENTS" .}}		public {{if isVoid .Returns}}Task{{else}}Task<{{formatType .Returns}}>{{end}} {{toPascalCase .Name}}Async ({{range $i, $v := .Parameters}}{{formatType .Type}} {{.Name}}{{if .Initializer}} = null{{end}}{{if last $i $m.Parameters | not}}, {{else}}{{end}}{{end}})
		{
			{{if isVoid .Returns}}return SendAsync{{else}}return MakeRequestAndDeserializeAsync<{{formatType .Returns}}>{{end}}("{{.Name}}", new Dictionary<string, object>() { {{range $i, $v := .Parameters}}{"{{.Name}}", {{.Name}} }{{if last $i $m.Parameters | not}}, {{end}}{{end}} });
		}
{{end}}
#endregion
	}
{{end}}
}
