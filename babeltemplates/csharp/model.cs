// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from {{.Filename}}
{{template "SIMPLECOMMENTS" .Comments }}
using System;
using System.Collections.Generic;
using System.Text;
using Concur.Babel;
{{range usings}}using {{.}};
{{end}}
namespace {{index .Namespaces "csharp"}}
{
{{range .Enums}}
{{setindent "\t"}}{{template "COMMENTS" .Comments }}	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public enum {{.Name}}
	{
{{range $i,$v := .Values}}{{if $i}},
{{end}}		{{.Name}} = {{formatValue .}}{{end}}
	}
{{end}}{{range .Consts}}
{{setindent "\t"}}{{template "COMMENTS" .Comments }}	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public sealed class {{.Name}}
	{
{{range .Values}}		public const {{constType .DataType}} {{.Name}} = {{formatValue .}};
{{end}}	}
{{end}}{{range $is, $xs :=  .Structs}}
{{setindent "\t"}}{{template "COMMENTS" .Comments }}{{template "ATTRS" .Attributes}}	public {{if .Abstract}}abstract {{end}}class {{.Name}}{{if .Extends}} : {{.Extends}}, IBabelModel{{else}} : IBabelModel{{end}}
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		public {{.Name}}()
		{ {{range .Fields}}{{if .Initializer}}
			{{toPascalCase .Name}} = {{cast .Type}}{{formatValue .Initializer}};{{end}}{{if .Type.IsList}}
			{{toPascalCase .Name}} = new {{formatType .Type}}();{{end}}{{if .Type.IsMap}}
			{{toPascalCase .Name}} = new {{formatType .Type}}();{{end}}{{end}}
		}{{range .Fields}}

{{setindent "\t\t"}}{{template "COMMENTS" .Comments }}{{template "ATTRS" .Attributes}}		public {{formatType .Type}} {{toPascalCase .Name}} { get; set; }{{end}}

		public override string ToString()
		{
			var ser = new BabelJsonSerializer();
			using(var strm = (System.IO.MemoryStream)ser.Serialize(this))
			{
				return (new UTF8Encoding(false)).GetString(strm.ToArray());
			}
		}
		#region IBabelModel
		public {{if .Extends}}override {{else}}virtual {{end}}void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
		{
			if(method == null) throw new ArgumentNullException("method");
{{range .Fields}}			{{if isTrivialProperty .Type}}if(runOnAll) {{end}}{{toPascalCase .Name}} = ({{formatType .Type}}) method("{{.Name}}", typeof({{formatType .Type}}), {{toPascalCase .Name}}, auxData);
{{end}}{{if .Extends}}
			base.RunOnChildren<T>(method, auxData, runOnAll);{{end}}
		}

		public {{if .Extends}}override {{else}}virtual {{end}}bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
		{
			if(method == null) throw new ArgumentNullException("method");
			switch(name)
			{
{{range .Fields}}				case "{{.Name}}": {{toPascalCase .Name}} = ({{formatType .Type}}) method("{{.Name}}", typeof({{formatType .Type}}), {{toPascalCase .Name}}, auxData); return true;
{{end}}				default: {{if .Extends}}return base.RunOnChild<T>(name, method, auxData);{{else}}return false;{{end}}
			}
		}
		#endregion
	}
{{end}}
} 
